version: '{build}.{branch}'
skip_branch_with_pr: true
install:
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ps: If(($env:PYTHON).Contains("pypy2")) { (New-Object Net.WebClient).DownloadFile('https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.6.0-win32.zip', "$env:appveyor_build_folder\pypy2.zip"); 7z x pypy2.zip | Out-Null; move pypy2-v5.6.0-win32 C:\pypy2; move C:\pypy2\pypy.exe C:\pypy2\python.exe }
  - ps: If(($env:PYTHON).Contains("pypy3")) { (New-Object Net.WebClient).DownloadFile('https://bitbucket.org/pypy/pypy/downloads/pypy3-2.4.0-win32.zip', "$env:appveyor_build_folder\pypy3.zip"); 7z x pypy3.zip | Out-Null; move pypy3-2.4.0-win32 C:\pypy3; move C:\pypy3\pypy.exe C:\pypy3\python.exe }
  - ps: If(-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }
  - cmd: "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - cmd: "python --version"
  - cmd: "pip --version"
  - ps: If(($env:PYTHON).Contains("pypy2")) { (New-Object Net.WebClient).DownloadFile('https://bootstrap.pypa.io/get-pip.py',     "$env:appveyor_build_folder\get-pip.py"); python get-pip.py }
  - ps: If(($env:PYTHON).Contains("pypy3")) { (New-Object Net.WebClient).DownloadFile('https://bootstrap.pypa.io/3.2/get-pip.py', "$env:appveyor_build_folder\get-pip.py"); python get-pip.py }
  - cmd: "pip --version"
  - cmd: "python -m pip --version"
  - ps: If(($env:PYTHON).Contains("pypy3")) { python -m pip install --disable-pip-version-check --user --upgrade "pip<8.0.0" } Else { python -m pip install --disable-pip-version-check --user --upgrade pip }
#  - cmd: python -m pip install --upgrade pip
  - cmd: "%CMD_IN_ENV% python -m pip install coverage"
clone_script:
  - cmd: git clone https://github.com/ArneBachmann/tagsplorer .\
environment:
  PYTHONDONTWRITEBYTECODE: True  # avoid writing __pycache__ dirs for Python 3
  matrix:
    - PYTHON: "C:\\pypy2"
      platform: x86
    - PYTHON: "C:\\pypy3"
      platform: x86
    - PYTHON: "C:\\Python27"
      platform: x86
    - PYTHON: "C:\\Python27-x64"
      platform: x64
    - PYTHON: "C:\\Python35"
      platform: x86
    - PYTHON: "C:\\Python35-x64"
      platform: x64
    - PYTHON: "C:\\Python36"
      platform: x86
    - PYTHON: "C:\\Python36-x64"
      platform: x64
    - PYTHON: "C:\\Miniconda"
      platform: x86
    - PYTHON: "C:\\Miniconda-x64"
      platform: x64
    - PYTHON: "C:\\Miniconda35"
      platform: x86
    - PYTHON: "C:\\Miniconda35-x64"
      platform: x64
build_script:
  - cmd: python -B setup.py build
test_script:
  - cmd: coverage run tests.py
after_test:
  - cmd: coverage html
  - cmd: coverage annotate tests.py
  - cmd: 7z a coverage.zip htmlcov\*
artifacts:
  - path: htmlcov.zip
    name: Coverage Report
    type: Zip
deploy: off
